class_1_centr <- colmeans(class_1_data)
class_2_centr <- colmeans(class_2_data)
df <- data.frame(rbind(cbind(class_1_data, type = 'A'), cbind(class_2_data, type = 'B'),
cbind(t(class_1_centr), type = 'c(A)'), cbind(t(class_2_centr), type = 'c(B)')))
colnames(df) <- c('X', 'Y', 'type')
df$X <- as.numeric(df$X)
df$Y <- as.numeric(df$Y)
d_vec <- class_1_centr/norm(class_1_centr, type = '2') -
class_2_centr/norm(class_2_centr, type = '2')
d_vec <- d_vec/norm(d_vec, type = '2')
d_mat <- cbind(d_vec, c(1, 0))
U = qr.Q(qr(d_mat))
S = diag(2)
S[1,1] = 0
Uinv = qr.solve(U)
P = U %*% S %*% Uinv
df_proj <- t(apply(df[df$type %in% c('A', 'B'),], 1, FUN = function(z){
vec = as.numeric(z[1:2])
P %*% vec
}))
df_proj <- data.frame(df_proj)
colnames(df_proj) <- c('X', 'Y')
df_proj$type <- c(rep('p(A)', K), rep('p(B)', K))
ggplot() +
geom_point(aes(x=X, y=Y, colour= type), data = df, size = 2) +
geom_point(aes(x=X, y=Y, colour= type), data = df_proj, size = 2) +
geom_line(aes(x=df[df$type %in% c('c(A)', 'c(B)'),1],
y=df[df$type %in% c('c(A)', 'c(B)'),2]), colour = 'orange') +
xlim(-5, 10) + ylim(-10, 10) +
geom_vline(xintercept=0) + geom_hline(yintercept = 0) +
theme_classic()
df_norm <- data.frame(t(apply(df[1:(2*K),], 1, FUN = function(z){
vec = as.numeric(z[1:2])
vec = vec/norm(vec, type = '2')
c(vec, z[3])
})))
colnames(df_norm)[1:2] <- c('X', 'Y')
df_norm$X <- as.numeric(df_norm$X)
df_norm$Y <- as.numeric(df_norm$Y)
df_proj_norm <- data.frame(t(apply(df_proj[1:(2*K),], 1, FUN = function(z){
vec = as.numeric(z[1:2])
vec = vec/norm(vec, type = '2')
c(vec, z[3])
})))
colnames(df_proj_norm)[1:2] <- c('X', 'Y')
df_proj_norm$X <- as.numeric(df_proj_norm$X)
df_proj_norm$Y <- as.numeric(df_proj_norm$Y)
ggplot() +
geom_point(aes(x=X, y=Y, colour= type), data = df_norm, size = 2) +
geom_point(aes(x=X, y=Y, colour= type), data = df_proj_norm, size = 2) +
xlim(-2, 2) + ylim(-2, 2) +
geom_vline(xintercept=0) + geom_hline(yintercept = 0) +
theme_classic()
# Orthogonal projection
library(Rfast)
library(ggplot2)
K <- 10
class_1_data  <- rmvnorm(n = K, mu = c(-1, 5), sigma = diag(2), seed = 11)
class_2_data  <- rmvnorm(n = K, mu = c(8, -7), sigma = diag(2), seed = 22)
class_1_centr <- colmeans(class_1_data)
class_2_centr <- colmeans(class_2_data)
df <- data.frame(rbind(cbind(class_1_data, type = 'A'), cbind(class_2_data, type = 'B'),
cbind(t(class_1_centr), type = 'c(A)'), cbind(t(class_2_centr), type = 'c(B)')))
colnames(df) <- c('X', 'Y', 'type')
df$X <- as.numeric(df$X)
df$Y <- as.numeric(df$Y)
d_vec <- class_1_centr/norm(class_1_centr, type = '2') -
class_2_centr/norm(class_2_centr, type = '2')
d_vec <- d_vec/norm(d_vec, type = '2')
d_mat <- cbind(d_vec, c(1, 0))
U = qr.Q(qr(d_mat))
S = diag(2)
S[1,1] = 0
Uinv = qr.solve(U)
P = U %*% S %*% Uinv
df_proj <- t(apply(df[df$type %in% c('A', 'B'),], 1, FUN = function(z){
vec = as.numeric(z[1:2])
P %*% vec
}))
df_proj <- data.frame(df_proj)
colnames(df_proj) <- c('X', 'Y')
df_proj$type <- c(rep('p(A)', K), rep('p(B)', K))
ggplot() +
geom_point(aes(x=X, y=Y, colour= type), data = df, size = 2) +
geom_point(aes(x=X, y=Y, colour= type), data = df_proj, size = 2) +
geom_line(aes(x=df[df$type %in% c('c(A)', 'c(B)'),1],
y=df[df$type %in% c('c(A)', 'c(B)'),2]), colour = 'orange') +
xlim(-5, 10) + ylim(-10, 10) +
geom_vline(xintercept=0) + geom_hline(yintercept = 0) +
theme_classic()
df_norm <- data.frame(t(apply(df[1:(2*K),], 1, FUN = function(z){
vec = as.numeric(z[1:2])
vec = vec/norm(vec, type = '2')
c(vec, z[3])
})))
colnames(df_norm)[1:2] <- c('X', 'Y')
df_norm$X <- as.numeric(df_norm$X)
df_norm$Y <- as.numeric(df_norm$Y)
df_proj_norm <- data.frame(t(apply(df_proj[1:(2*K),], 1, FUN = function(z){
vec = as.numeric(z[1:2])
vec = vec/norm(vec, type = '2')
c(vec, z[3])
})))
colnames(df_proj_norm)[1:2] <- c('X', 'Y')
df_proj_norm$X <- as.numeric(df_proj_norm$X)
df_proj_norm$Y <- as.numeric(df_proj_norm$Y)
ggplot() +
geom_point(aes(x=X, y=Y, colour= type), data = df_norm, size = 2) +
geom_point(aes(x=X, y=Y, colour= type), data = df_proj_norm, size = 2) +
xlim(-2, 2) + ylim(-2, 2) +
geom_vline(xintercept=0) + geom_hline(yintercept = 0) +
theme_classic()
d_vec
U
ggplot() +
geom_line(aes(x=c(0, d_vec[1]),
y=c(0, d_vec[2])), colour = 'orange') +
geom_line(aes(x=c(0, U[1,1]),
y=c(0, U[2,1])), colour = 'red') +
xlim(-2, 2) + ylim(-2, 2) +
geom_vline(xintercept=0) + geom_hline(yintercept = 0) +
theme_classic()
U
d_vec
ggplot() +
geom_line(aes(x=c(0, d_vec[1]),
y=c(0, d_vec[2])), colour = 'orange') +
geom_line(aes(x=c(0, U[2,1]),
y=c(0, U[1,1])), colour = 'red') +
xlim(-2, 2) + ylim(-2, 2) +
geom_vline(xintercept=0) + geom_hline(yintercept = 0) +
theme_classic()
P
ggplot() +
geom_line(aes(x=c(0, d_vec[1]),
y=c(0, d_vec[2])), colour = 'orange') +
geom_line(aes(x=c(0, U[1,2]),
y=c(0, U[2,2])), colour = 'red') +
xlim(-2, 2) + ylim(-2, 2) +
geom_vline(xintercept=0) + geom_hline(yintercept = 0) +
theme_classic()
ggplot() +
geom_point(aes(x=X, y=Y, colour= type), data = df_proj_norm, size = 2) +
geom_line(aes(x=c(0, d_vec[1]),
y=c(0, d_vec[2])), colour = 'orange') +
geom_line(aes(x=c(0, U[1,2]),
y=c(0, U[2,2])), colour = 'red') +
xlim(-2, 2) + ylim(-2, 2) +
geom_vline(xintercept=0) + geom_hline(yintercept = 0) +
theme_classic()
ggplot() +
geom_line(aes(x=c(0, d_vec[1]),
y=c(0, d_vec[2])), colour = 'orange') +
geom_line(aes(x=c(0, U[1,2]),
y=c(0, U[2,2])), colour = 'red') +
geom_point(aes(x=X, y=Y, colour= type), data = df_norm, size = 2) +
geom_point(aes(x=X, y=Y, colour= type), data = df_proj_norm, size = 2) +
xlim(-2, 2) + ylim(-2, 2) +
geom_vline(xintercept=0) + geom_hline(yintercept = 0) +
theme_classic()
class_1_centr
class_2_centr
class_1_centr_norm <- class_1_centr/norm(class_1_centr, type = '2')
class_2_centr_norm <- class_2_centr/norm(class_2_centr, type = '2')
# Orthogonal projection
library(Rfast)
library(ggplot2)
K <- 10
class_1_data  <- rmvnorm(n = K, mu = c(-1, 5), sigma = diag(2), seed = 11)
class_2_data  <- rmvnorm(n = K, mu = c(8, -7), sigma = diag(2), seed = 22)
class_1_centr <- colmeans(class_1_data)
class_2_centr <- colmeans(class_2_data)
df <- data.frame(rbind(cbind(class_1_data, type = 'A'), cbind(class_2_data, type = 'B'),
cbind(t(class_1_centr), type = 'c(A)'), cbind(t(class_2_centr), type = 'c(B)')))
colnames(df) <- c('X', 'Y', 'type')
df$X <- as.numeric(df$X)
df$Y <- as.numeric(df$Y)
d_vec <- class_1_centr/norm(class_1_centr, type = '2') -
class_2_centr/norm(class_2_centr, type = '2')
d_vec <- d_vec/norm(d_vec, type = '2')
d_mat <- cbind(d_vec, c(1, 0))
U = qr.Q(qr(d_mat))
S = diag(2)
S[1,1] = 0
Uinv = qr.solve(U)
P = U %*% S %*% Uinv
df_proj <- t(apply(df[df$type %in% c('A', 'B'),], 1, FUN = function(z){
vec = as.numeric(z[1:2])
P %*% vec
}))
df_proj <- data.frame(df_proj)
colnames(df_proj) <- c('X', 'Y')
df_proj$type <- c(rep('p(A)', K), rep('p(B)', K))
ggplot() +
geom_point(aes(x=X, y=Y, colour= type), data = df, size = 2) +
geom_point(aes(x=X, y=Y, colour= type), data = df_proj, size = 2) +
geom_line(aes(x=df[df$type %in% c('c(A)', 'c(B)'),1],
y=df[df$type %in% c('c(A)', 'c(B)'),2]), colour = 'orange') +
xlim(-5, 10) + ylim(-10, 10) +
geom_vline(xintercept=0) + geom_hline(yintercept = 0) +
theme_classic()
df_norm <- data.frame(t(apply(df[1:(2*K +2),], 1, FUN = function(z){
vec = as.numeric(z[1:2])
vec = vec/norm(vec, type = '2')
c(vec, z[3])
})))
colnames(df_norm)[1:2] <- c('X', 'Y')
df_norm$X <- as.numeric(df_norm$X)
df_norm$Y <- as.numeric(df_norm$Y)
df_proj_norm <- data.frame(t(apply(df_proj[1:(2*K),], 1, FUN = function(z){
vec = as.numeric(z[1:2])
vec = vec/norm(vec, type = '2')
c(vec, z[3])
})))
colnames(df_proj_norm)[1:2] <- c('X', 'Y')
df_proj_norm$X <- as.numeric(df_proj_norm$X)
df_proj_norm$Y <- as.numeric(df_proj_norm$Y)
ggplot() +
geom_line(aes(x=df_norm[df_norm$type %in% c('c(A)', 'c(B)'),1],
y=df_norm[df_norm$type %in% c('c(A)', 'c(B)'),2]), colour = 'orange') +
geom_line(aes(x=c(0, U[1,2]),
y=c(0, U[2,2])), colour = 'red') +
geom_point(aes(x=X, y=Y, colour= type), data = df_norm, size = 2) +
geom_point(aes(x=X, y=Y, colour= type), data = df_proj_norm, size = 2) +
xlim(-2, 2) + ylim(-2, 2) +
geom_vline(xintercept=0) + geom_hline(yintercept = 0) +
theme_classic()
# Orthogonal projection
library(Rfast)
library(ggplot2)
K <- 10
class_1_data  <- rmvnorm(n = K, mu = c(-1, 5), sigma = diag(2), seed = 11)
class_2_data  <- rmvnorm(n = K, mu = c(8, -7), sigma = diag(2), seed = 22)
class_1_centr <- colmeans(class_1_data)
class_2_centr <- colmeans(class_2_data)
df <- data.frame(rbind(cbind(class_1_data, type = 'A'), cbind(class_2_data, type = 'B'),
cbind(t(class_1_centr), type = 'c(A)'), cbind(t(class_2_centr), type = 'c(B)')))
colnames(df) <- c('X', 'Y', 'type')
df$X <- as.numeric(df$X)
df$Y <- as.numeric(df$Y)
d_vec <- class_1_centr/norm(class_1_centr, type = '2') -
class_2_centr/norm(class_2_centr, type = '2')
d_vec <- d_vec/norm(d_vec, type = '2')
d_mat <- cbind(d_vec, c(1, 0))
U = qr.Q(qr(d_mat))
S = diag(2)
S[1,1] = 0
Uinv = qr.solve(U)
P = U %*% S %*% Uinv
df_proj <- t(apply(df[df$type %in% c('A', 'B'),], 1, FUN = function(z){
vec = as.numeric(z[1:2])
P %*% vec
}))
df_proj <- data.frame(df_proj)
colnames(df_proj) <- c('X', 'Y')
df_proj$type <- c(rep('p(A)', K), rep('p(B)', K))
ggplot() +
geom_point(aes(x=X, y=Y, colour= type), data = df, size = 2) +
geom_point(aes(x=X, y=Y, colour= type), data = df_proj, size = 2) +
geom_line(aes(x=df[df$type %in% c('c(A)', 'c(B)'),1],
y=df[df$type %in% c('c(A)', 'c(B)'),2]), colour = 'orange') +
xlim(-5, 10) + ylim(-10, 10) +
geom_vline(xintercept=0) + geom_hline(yintercept = 0) +
theme_classic()
df_norm <- data.frame(t(apply(df[1:(2*K +2),], 1, FUN = function(z){
vec = as.numeric(z[1:2])
vec = vec/norm(vec, type = '2')
c(vec, z[3])
})))
colnames(df_norm)[1:2] <- c('X', 'Y')
df_norm$X <- as.numeric(df_norm$X)
df_norm$Y <- as.numeric(df_norm$Y)
df_proj_norm <- data.frame(t(apply(df_proj[1:(2*K),], 1, FUN = function(z){
vec = as.numeric(z[1:2])
vec = vec/norm(vec, type = '2')
c(vec, z[3])
})))
colnames(df_proj_norm)[1:2] <- c('X', 'Y')
df_proj_norm$X <- as.numeric(df_proj_norm$X)
df_proj_norm$Y <- as.numeric(df_proj_norm$Y)
ggplot() +
geom_point(aes(x=X, y=Y, colour= type), data = df_norm, size = 2) +
geom_point(aes(x=X, y=Y, colour= type), data = df_proj_norm, size = 2) +
geom_line(aes(x=df_norm[df_norm$type %in% c('c(A)', 'c(B)'),1],
y=df_norm[df_norm$type %in% c('c(A)', 'c(B)'),2]), colour = 'orange') +
geom_line(aes(x=c(0, U[1,2]),
y=c(0, U[2,2])), colour = 'red') +
xlim(-2, 2) + ylim(-2, 2) +
geom_vline(xintercept=0) + geom_hline(yintercept = 0) +
theme_classic()
# Orthogonal projection
library(Rfast)
library(ggplot2)
K <- 10
class_1_data  <- rmvnorm(n = K, mu = c(-1, 5), sigma = diag(2), seed = 11)
class_2_data  <- rmvnorm(n = K, mu = c(8, -7), sigma = diag(2), seed = 22)
View(class_1_data)
class_1_centr <- colmeans(class_1_data)
class_2_centr <- colmeans(class_2_data)
df <- data.frame(rbind(cbind(class_1_data, type = 'A'),
cbind(class_2_data, type = 'B'),
cbind(t(class_1_centr), type = 'c(A)'),
cbind(t(class_2_centr), type = 'c(B)')))
colnames(df) <- c('X', 'Y', 'type')
df$X <- as.numeric(df$X)
df$Y <- as.numeric(df$Y)
d_vec <- class_1_centr/norm(class_1_centr, type = '2') -
class_2_centr/norm(class_2_centr, type = '2')
d_vec
d_vec <- d_vec/norm(d_vec, type = '2')
d_mat <- cbind(d_vec, c(1, 0))
View(d_mat)
U = qr.Q(qr(d_mat))
View(U)
S = diag(2)
S[1,1] = 0
View(S)
Uinv = qr.solve(U)
P = U %*% S %*% Uinv
View(P)
df_proj <- t(apply(df[df$type %in% c('A', 'B'),], 1, FUN = function(z){
vec = as.numeric(z[1:2])
P %*% vec
}))
df_proj <- data.frame(df_proj)
colnames(df_proj) <- c('X', 'Y')
df_proj$type <- c(rep('p(A)', K), rep('p(B)', K))
ggplot() +
geom_point(aes(x=X, y=Y, colour= type), data = df, size = 2) +
geom_point(aes(x=X, y=Y, colour= type), data = df_proj, size = 2) +
geom_line(aes(x=df[df$type %in% c('c(A)', 'c(B)'),1],
y=df[df$type %in% c('c(A)', 'c(B)'),2]), colour = 'orange') +
xlim(-5, 10) + ylim(-10, 10) +
geom_vline(xintercept=0) + geom_hline(yintercept = 0) +
theme_classic()
df_norm <- data.frame(t(apply(df[1:(2*K +2),], 1, FUN = function(z){
vec = as.numeric(z[1:2])
vec = vec/norm(vec, type = '2')
c(vec, z[3])
})))
colnames(df_norm)[1:2] <- c('X', 'Y')
df_norm$X <- as.numeric(df_norm$X)
df_norm$Y <- as.numeric(df_norm$Y)
df_proj_norm <- data.frame(t(apply(df_proj[1:(2*K),], 1, FUN = function(z){
vec = as.numeric(z[1:2])
vec = vec/norm(vec, type = '2')
c(vec, z[3])
})))
colnames(df_proj_norm)[1:2] <- c('X', 'Y')
df_proj_norm$X <- as.numeric(df_proj_norm$X)
df_proj_norm$Y <- as.numeric(df_proj_norm$Y)
ggplot() +
geom_point(aes(x=X, y=Y, colour= type), data = df_norm, size = 2) +
geom_point(aes(x=X, y=Y, colour= type), data = df_proj_norm, size = 2) +
geom_line(aes(x=df_norm[df_norm$type %in% c('c(A)', 'c(B)'),1],
y=df_norm[df_norm$type %in% c('c(A)', 'c(B)'),2]), colour = 'orange') +
geom_line(aes(x=c(0, U[1,2]),
y=c(0, U[2,2])), colour = 'red') +
xlim(-2, 2) + ylim(-2, 2) +
geom_vline(xintercept=0) + geom_hline(yintercept = 0) +
theme_classic()
View(U)
View(S)
# Validation
setwd("~/Documents/Turing/GPU/MOSIP/data")
load("~/Documents/Turing/GPU/MOSIP/data/workspace.RData")
####
path  <- paste0('/Users/santhoshnarayanan/Documents/Turing/GPU/MOSIP/models/rep_Female_FACENET_2.csv')
python_data    <- fread(path, header = FALSE, skip = 1)
library(xml2)
library(readr)
library(data.table)
library(gridExtra)
library(matrixStats)
library(parallel)
library(stringr)
library(pdist)
# Validation
setwd("~/Documents/Turing/GPU/MOSIP/data")
load("~/Documents/Turing/GPU/MOSIP/data/workspace.RData")
####
path  <- paste0('/Users/santhoshnarayanan/Documents/Turing/GPU/MOSIP/models/rep_Female_FACENET_2.csv')
python_data    <- fread(path, header = FALSE, skip = 1)
python_data$V2 <- substr(python_data$V2, 66, 90)
python_data    <- python_data[,-1]
python_data$id <- tstrsplit(python_data$V2, "_", keep = 1)
python_data$filename <- substr(python_data$V2, 9, 20)
python_data <- python_data[,-1]
ncol        <- ncol(python_data)
python_data <- python_data[ , .SD , .SDcols = c(ncol-1, ncol, 1:(ncol-2))]
alldata     <- filterdata[python_data, on = c('id', 'filename'), nomatch=NULL]
setkeyv(alldata, c('id', 'filename'))
rm(list = c('python_data', 'path'))
play_data <- data.frame(alldata[,-c(1:4)])
cl <- makeCluster(getOption("cl.cores", 15))
clusterExport(cl, list("play_data", "alldata", "pdist", "data.table", "setorder"))
# Identification rates
id.results = parSapply(cl, 1:100, FUN = function(z){
#set.seed(z)
#reference_set <- sample.int(100, 320, replace = TRUE)
#reference_set <- reference_set + 100*seq(0, 319, 1)
reference_set <- z + 100*seq(0, 319, 1)
presentation_set <- (1:nrow(play_data))[!(1:nrow(play_data)) %in% reference_set]
dist_mat  <- as.matrix(pdist(X = play_data, indices.A = presentation_set, indices.B = reference_set))
id_set <- apply(dist_mat, 1, FUN = which.min)
res_dt <- data.table(alldata[-reference_set, c('race', 'gender')],
success = alldata$id[-reference_set] == alldata$id[reference_set][id_set])
res_dt <- res_dt[, list(rate = mean(success)), by = c('race', 'gender')]
setorder(res_dt, race, gender)
return(res_dt$rate)
})
stopCluster(cl)
id.meta <- data.table(expand.grid(race = unique(idlist$race), gender = unique(idlist$gender)))
setorder(id.meta, race, gender)
id.results <- cbind(id.meta, id.results)
id.results <- id.results[, list(rate = rowMeans(.SD)), by = c('race', 'gender'), .SDcols = -c(1,2)]
setorder(id.results, rate)
id.results$rate <- round(id.results$rate, 3)
setwd("~/Documents/Turing/GPU/MOSIP/output")
pdf(paste0("FACENET_Female_1.pdf"), height=3, width=2.2)
grid.table(id.results)
dev.off()
# Validation
setwd("~/Documents/Turing/GPU/MOSIP/data")
load("~/Documents/Turing/GPU/MOSIP/data/workspace.RData")
####
path  <- paste0('/Users/santhoshnarayanan/Documents/Turing/GPU/MOSIP/models/rep_Full_FACENET.csv')
python_data    <- fread(path, header = FALSE, skip = 1)
python_data$V2 <- substr(python_data$V2, 66, 90)
python_data    <- python_data[,-1]
python_data$id <- tstrsplit(python_data$V2, "_", keep = 1)
python_data$filename <- substr(python_data$V2, 9, 20)
python_data <- python_data[,-1]
ncol        <- ncol(python_data)
python_data <- python_data[ , .SD , .SDcols = c(ncol-1, ncol, 1:(ncol-2))]
alldata     <- filterdata[python_data, on = c('id', 'filename'), nomatch=NULL]
setkeyv(alldata, c('id', 'filename'))
rm(list = c('python_data', 'path'))
play_data <- data.frame(alldata[,-c(1:4)])
cl <- makeCluster(getOption("cl.cores", 15))
clusterExport(cl, list("play_data", "alldata", "pdist", "data.table", "setorder"))
# Identification rates
id.results = parSapply(cl, 1:100, FUN = function(z){
#set.seed(z)
#reference_set <- sample.int(100, 320, replace = TRUE)
#reference_set <- reference_set + 100*seq(0, 319, 1)
reference_set <- z + 100*seq(0, 319, 1)
presentation_set <- (1:nrow(play_data))[!(1:nrow(play_data)) %in% reference_set]
dist_mat  <- as.matrix(pdist(X = play_data, indices.A = presentation_set, indices.B = reference_set))
id_set <- apply(dist_mat, 1, FUN = which.min)
res_dt <- data.table(alldata[-reference_set, c('race', 'gender')],
success = alldata$id[-reference_set] == alldata$id[reference_set][id_set])
res_dt <- res_dt[, list(rate = mean(success)), by = c('race', 'gender')]
setorder(res_dt, race, gender)
return(res_dt$rate)
})
stopCluster(cl)
id.meta <- data.table(expand.grid(race = unique(idlist$race), gender = unique(idlist$gender)))
setorder(id.meta, race, gender)
id.results <- cbind(id.meta, id.results)
id.results <- id.results[, list(rate = rowMeans(.SD)), by = c('race', 'gender'), .SDcols = -c(1,2)]
setorder(id.results, rate)
id.results$rate <- round(id.results$rate, 3)
setwd("~/Documents/Turing/GPU/MOSIP/output")
pdf(paste0("FACENET_Full.pdf"), height=3, width=2.2)
grid.table(id.results)
dev.off()
# Validation
setwd("~/Documents/Turing/GPU/MOSIP/data")
load("~/Documents/Turing/GPU/MOSIP/data/workspace.RData")
####
path  <- paste0('/Users/santhoshnarayanan/Documents/Turing/GPU/MOSIP/models/rep_Full_FACENET_2.csv')
python_data    <- fread(path, header = FALSE, skip = 1)
python_data$V2 <- substr(python_data$V2, 66, 90)
python_data    <- python_data[,-1]
python_data$id <- tstrsplit(python_data$V2, "_", keep = 1)
python_data$filename <- substr(python_data$V2, 9, 20)
python_data <- python_data[,-1]
ncol        <- ncol(python_data)
python_data <- python_data[ , .SD , .SDcols = c(ncol-1, ncol, 1:(ncol-2))]
alldata     <- filterdata[python_data, on = c('id', 'filename'), nomatch=NULL]
setkeyv(alldata, c('id', 'filename'))
rm(list = c('python_data', 'path'))
play_data <- data.frame(alldata[,-c(1:4)])
cl <- makeCluster(getOption("cl.cores", 15))
clusterExport(cl, list("play_data", "alldata", "pdist", "data.table", "setorder"))
# Identification rates
id.results = parSapply(cl, 1:100, FUN = function(z){
#set.seed(z)
#reference_set <- sample.int(100, 320, replace = TRUE)
#reference_set <- reference_set + 100*seq(0, 319, 1)
reference_set <- z + 100*seq(0, 319, 1)
presentation_set <- (1:nrow(play_data))[!(1:nrow(play_data)) %in% reference_set]
dist_mat  <- as.matrix(pdist(X = play_data, indices.A = presentation_set, indices.B = reference_set))
id_set <- apply(dist_mat, 1, FUN = which.min)
res_dt <- data.table(alldata[-reference_set, c('race', 'gender')],
success = alldata$id[-reference_set] == alldata$id[reference_set][id_set])
res_dt <- res_dt[, list(rate = mean(success)), by = c('race', 'gender')]
setorder(res_dt, race, gender)
return(res_dt$rate)
})
stopCluster(cl)
id.meta <- data.table(expand.grid(race = unique(idlist$race), gender = unique(idlist$gender)))
setorder(id.meta, race, gender)
id.results <- cbind(id.meta, id.results)
id.results <- id.results[, list(rate = rowMeans(.SD)), by = c('race', 'gender'), .SDcols = -c(1,2)]
setorder(id.results, rate)
id.results$rate <- round(id.results$rate, 3)
setwd("~/Documents/Turing/GPU/MOSIP/output")
pdf(paste0("FACENET_Full_1.pdf"), height=3, width=2.2)
grid.table(id.results)
dev.off()
